@page "/maze"
@inject IJSRuntime JsRuntime;

<div id="layoutRoot" tabindex="0" style="outline: none;"
     @onkeydown="@(e => HandleKeyDown(e))">
    <link href="css/maze.css" rel="stylesheet" />

    <select @bind="@Size"
            style="display: block; margin-left: auto; margin-right: auto">
        <option value="10">10x10</option>
        <option value="16">16x16</option>
        <option value="20">20x20</option>
    </select>
    <br/>
    <button style="display: block; margin-left: auto; margin-right: auto" 
            @onclick="@OnSizeChanged">New Map</button>
    <br/>

    <div class="board" style="--boardDimension:@BoardDimension">
        @for (int row = 0; row < BoardDimension; row++)
        {
            @for (int column = 0; column < BoardDimension; column++)
            {
                bool isPlayerPosition = (row == _rowPosition) && (column == _columnPosition);
                if (isPlayerPosition)
                {
                    <div class="square player">0</div>
                }
                else
                {
                    var cell = MazeData[column, row];
                    string className = (cell.IsVisible && cell.IsWall) ? "square wall" : "square";
                    <div class="@className"></div>
                }
            }
        }
    </div>

    <div style="text-align: center">@GameTime</div>

    <MazeControls OnMoveLeft="@(() => MoveTo(Direction.W))"
                  OnMoveTop="@(() => MoveTo(Direction.N))"
                  OnMoveRight="@(() => MoveTo(Direction.E))"
                  OnMoveBottom="@(() => MoveTo(Direction.S))" />
</div>


@functions {
    private Random _random;
    private int _size;
    private int _boardDimension;
    private int _rowPosition;
    private int _columnPosition;

    private System.Timers.Timer _timer;
    private DateTimeOffset _gameStartTime;
    private bool _isWon;

    private MazeCell[,] MazeData;
    private string GameTime;

    public int Size
    {
        get { return _size; }
        set { _size = value; OnSizeChanged(); }
    }

    public int BoardDimension => _boardDimension;

    protected override void OnInit()
    {
        // Prevent scrolling
        JsRuntime.InvokeAsync<object>("preventScrolling", "layoutRoot");

        _random = new Random();
        _timer = new System.Timers.Timer();
        _timer.Interval = 850;
        _timer.Elapsed += (s, e) => OnTick();

        GameTime = TimeSpan.Zero.ToString(@"hh\:mm\:ss");
        Size = 10;
    }

    private void OnTick()
    {
        TimeSpan elapsedTime = DateTimeOffset.Now - _gameStartTime;
        GameTime = elapsedTime.ToString(@"hh\:mm\:ss");

        StateHasChanged();
    }

    protected override void OnAfterRender()
    {
        // Focus root div
        JsRuntime.InvokeAsync<object>("focusInterop", "layoutRoot");
    }

    private void OnSizeChanged()
    {
        _timer.Stop();
        _isWon = false;
        _boardDimension = 2 * _size + 1;

        GameTime = TimeSpan.Zero.ToString(@"hh\:mm\:ss");
        MazeData = new MazeCell[BoardDimension, BoardDimension];

        var maze = MazeData;
        var dimension = BoardDimension;
        // Prepare walls
        for (int row = 0; row < dimension; row++)
        {
            for (int column = 0; column < dimension; column++)
            {
                var cell = maze[column, row];
                if (row == 0 || row == dimension - 1 || column == 0 || column == dimension - 1)
                {
                    // Outer walls
                    cell.IsWall = true;
                }
                else if ((row % 2) != 1 || (column % 2) != 1)
                {
                    // Inner walls
                    cell.IsWall = true;
                }
                else
                {
                    // Empty space
                    // - Always on odd indices.
                    cell.IsWall = false;
                }

                maze[column, row] = cell;
            }
        }

        var middleColumn = Size + 1;
        // Set entry
        MazeData[middleColumn, 0] = new MazeCell() { IsWall = false };
        // Set exit
        MazeData[middleColumn, BoardDimension - 1] = new MazeCell() { IsWall = false };
        // Generate maze
        GenerateMaze(MazeData, new bool[Size, Size], _random.Next(0, Size), _random.Next(0, Size));
        // Set position
        SetPosition(0, middleColumn);
        // Make goal visible
        SetVisibility(BoardDimension - 1, middleColumn, 1, true);
    }

    private void GenerateMaze(MazeCell[,] maze, bool[,] visitedCells, int row, int column)
    {
        visitedCells[column, row] = true;

        Direction[] directions = new Direction[] { Direction.N, Direction.E, Direction.S, Direction.W };
        Shuffle(directions);

        for (int i = 0; i < directions.Length; i++)
        {
            var direction = directions[i];
            var nextRow = row;
            var nextColumn = column;

            var mazeDataRow = row * 2 + 1;
            var mazeDataColumn = column * 2 + 1;

            switch (direction)
            {
                case Direction.N:
                    nextRow--;
                    mazeDataRow--;
                    break;
                case Direction.S:
                    nextRow++;
                    mazeDataRow++;
                    break;
                case Direction.W:
                    nextColumn--;
                    mazeDataColumn--;
                    break;
                case Direction.E:
                    nextColumn++;
                    mazeDataColumn++;
                    break;
            }

            if (nextRow < 0 || nextRow > Size - 1 || nextColumn < 0 || nextColumn > Size - 1)
            {
                // Out of bounds.
                continue;
            }

            if (visitedCells[nextColumn, nextRow])
            {
                // Already visited.
                continue;
            }

            maze[mazeDataColumn, mazeDataRow] = new MazeCell() { IsWall = false };
            GenerateMaze(maze, visitedCells, nextRow, nextColumn);
        }
    }

    private void HandleKeyDown(UIKeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp":
                MoveTo(Direction.N);
                break;
            case "ArrowDown":
                MoveTo(Direction.S);
                break;
            case "ArrowLeft":
                MoveTo(Direction.W);
                break;
            case "ArrowRight":
                MoveTo(Direction.E);
                break;
        }
    }

    private void MoveTo(Direction direction)
    {
        if (_isWon)
        {
            return;
        }

        if (!_timer.Enabled)
        {
            _gameStartTime = DateTimeOffset.Now;
            _timer.Start();
        }

        int row = _rowPosition;
        int column = _columnPosition;

        switch (direction)
        {
            case Direction.N:
                row--;
                break;
            case Direction.S:
                row++;
                break;
            case Direction.W:
                column--;
                break;
            case Direction.E:
                column++;
                break;
        }

        var dimension = BoardDimension;
        if (row < 0 || row >= dimension - 1 || column < 0 || column > dimension - 1)
        {
            // Out of bounds.

            // Check victory conditions.
            if (direction == Direction.S && row == dimension - 1 && column == Size + 1)
            {
                // Victory
                
                // Move
                SetPosition(row, column);

                _timer.Stop();
                _isWon = true;
                OnTick();

                JsRuntime.InvokeAsync<object>("alertInterop", "Victory");
                SetVisibilityAll(true);
            }
        }
        else
        {
            // Whithin the bounds.

            // Check wall.
            if (!MazeData[column, row].IsWall)
            {
                // Move
                SetPosition(row, column);
            }
        }

        // Re-render UI.
        StateHasChanged();
    }

    private void SetPosition(int row, int column)
    {
        SetVisibility(row, column, 1, true);

        _rowPosition = row;
        _columnPosition = column;
    }

    private void SetVisibility(int rowCenter, int columnCenter, int radius, bool isVisible)
    {
        var dimension = BoardDimension;
        for (int row = rowCenter - radius; row <= rowCenter + radius; row++)
        {
            for (int column = columnCenter - radius; column <= columnCenter + radius; column++)
            {
                if (row >= 0 && row < dimension && column >= 0 && column < dimension)
                {
                    // Set visibility
                    var cell = MazeData[column, row];
                    cell.IsVisible = isVisible;
                    MazeData[column, row] = cell;
                }
            }
        }
    }

    private void SetVisibilityAll(bool isVisible)
    {
        var dimension = BoardDimension;
        for (int row = 0; row < dimension; row++)
        {
            for (int column = 0; column < dimension; column++)
            {
                // Set visibility
                var cell = MazeData[column, row];
                cell.IsVisible = isVisible;
                MazeData[column, row] = cell;
            }
        }
    }

    private void Shuffle(Direction[] directions)
    {
        int n = directions.Length;
        while (n > 1)
        {
            n--;
            int k = _random.Next(n + 1);
            Direction value = directions[k];
            directions[k] = directions[n];
            directions[n] = value;
        }
    }

    private enum Direction : byte
    {
        N, E, S, W
    }

    private struct MazeCell
    {
        public bool IsVisible { get; set; }
        public bool IsWall { get; set; }
    }
}
